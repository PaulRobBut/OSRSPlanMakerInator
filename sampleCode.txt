class Player():
    """
    Represents the Player Character
    :param n: Player Name
    :param c: Player Coordinates
    :param i: Player Inventory, defaults to empty
    :param mh: Player max health, defaults to 25
    :param h: Player health, defaults to 25
    """
    def __init__(self, n, c, i = [], mh = 25, h = 25):
        self.name = n
        ##Overworld
        self.coords = c
        self.inventory = Inventory(i)
        ##Battle
        self.maxHealth = mh
        self.health = h

    def move(self, d, miX, miY, maX, maY):
        if d == "up":
            if self.coords[1] == maY:
                print("You cannot go further.")
            else:
                self.coords[1] += 1
        elif d == "down":
            if self.coords[1] == miY:
                print("You cannot go further.")
            else:
                self.coords[1] -= 1
        elif d == "right":
            if self.coords[0] == maX:
                print("You cannot go further.")
            else:
                self.coords[0] += 1
        elif d == "left":
            if self.coords[0] == miX:
                print("You cannot go further.")
            else:
                self.coords[0] -= 1

    def collect(self, i):
        print("You got: " + i._name + "!")
        self.inventory.addItem(i)

    def hasItem(self, i):
        return self.inventory.hasItem(i)

    def removeItem(self, i):
        self.inventory.removeItem(i)
                
    def infoDump(self):
        print("Name: " + self.name)
        print("Coordinates: " + str(self.coords))
        print("Inventory: ")
        for item in self.inventory.saveInven():
            item.infoDump()

    def savePlayer(self):
        savP = "{}:|{}:|".format(self.name, self.coords)
        pInv = []
        for item in self.inventory.saveInven():
            pInv.append(item.saveItem())
        savP += (str (pInv) + ":|")
        savP += (str(self.health) + "|" + str(self.maxHealth) + ":|")
        return savP

    ##Todo: String to player

    you = antGusModl.Player(yourName, youPl)

    overItems = dict()

antGusLST:

import os
from antGusModl import Player, Item

## String Methods
def fetchInput(x = "Test Prompt: ", y = False):
    """
    Returns a string the player input
    :param x: Input prompt
    :param y: converts to lower case to disregard capitalization, automatically set to false
    :return: the player's input
    """
    z = input(x)
    z = z.strip()
    if (y):
        z = z.lower()
    return z

## Saving
def saveFile(pla, wor, ver):
    """
    Saves File
    :param pla: Player Object
    :param wor: World Variables
    key:
    (Player Name):|(Player Coordinates):|&(Overworld Items)
    """
    print(pla.name)
    if (pla.name == "NoSave"):
        print("Because you are on a No Save file, nothing will be saved")
    else: 
        fNam = "savFil" + pla.name + ".txt"
        saveLines = []
        ## Step 1: Save Version
        saveLines.append("Version::" + ver + ":|&\n")
        ## Step 2: Save Player
        saveLines.append("Player::" + pla.savePlayer() + ":|&\n")
        ## Step 3: Save Overworld Items
        overIts = wor[0]
        ovItSav = []
        for item in overIts:
            ovItSav.append(str(item) + "|." + overIts[item].saveItem())
        saveLines.append("OverItems::" + str(ovItSav) + ":|&\n")
        ## Step 4: Save Overworld Stations
        overStats = wor[1]
        ovStSav = []
        for station in overStats:
            print(overStats[station].saveStation())
            ovStSav.append(str(station) + "|." + overStats[station].saveStation())
        saveLines.append("OverStations::" + str(ovStSav))
        
        with open(fNam, "w") as g:
            for s in saveLines:
                g.write(s)
                ## Don't forget \n after each line!

## Loading
def loadFile():
    """
    """
    loadedLines = []
    validFiles = []
    for x in os.listdir():
        if x in os.listdir():
            if x.startswith("savFil") and x.endswith(".txt"):
                validFiles.append(x[6:len(x) - 4])
    print("Files: " + str(validFiles))
    uNam = fetchInput("Which file? ")
    if uNam not in validFiles:
        print("Invalid file name, loading default file")
        uNam = ""
    lFil = "savFil" + uNam + ".txt"
    with open(lFil, "r") as g:
        for r in g:
            loadedLines.append(r)
    return loadedLines